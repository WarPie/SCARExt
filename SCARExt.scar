{$L SCARExt.dll}
{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=]
|| What is this: In short I would define SCAREXT as a grabage collection.
|| Alpha v0.1
|| - SLACKY
[=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}
{$I Plotter.scar}

{=-=-=-=-=-=-=-= SCARExt.dll contains the following functions -=-=-=-=-=-=-=-=]
|| Close to every function we got start with `XT_`. So to find am do:
|| Load this include file in SCAR, write `XT_` then press Ctrl+Space ;)
||
|| Plus the plotting lib: TPlot!
[=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}
type
  XT_MatchAlgo = (LAB, LCH, RGB);


{* 
  Convert ATIA to STR (for debugging)...
*}
function ATIAToStr(ATIA: T2DIntArray): String;
var
  i: Integer;
begin
  Result := '['#13;
  for i:=0 to High(ATIA) do begin
    Result := Result + '['+ TIAToStr(ATIA[i]) + ']'#13;
  end;
  Result := Result +']'#13;
end;

  
{*
 Copy the client area as bitmap from X->Y2
*}
function XT_ClientBMP(XS,YS,XE,YE: Integer): TSCARBitmap;
begin 
  Result := GetClient.CaptureEx(XS,YS,XE,YE); 
end;


{*
 ....
*}
procedure XT_ClientSize(var Width, Height: Integer);
begin
  GetBoxSize(GetClient.ImageArea, Width, Height);
end;


{*
  Get all pixels from an area defined by TBox..
*}
function XT_GetClientColors(Area:TBox): TIntArray;
var
  BMP: TSCARBitmap;
  TPA: TPointArray;
begin
  if ((Area.X1 <= Area.X2) and (Area.Y1 <= Area.Y2)) then
  begin
    BMP := GetClient.CaptureEx(Area.X1, Area.Y1, Area.X2, Area.Y2);
    TPA := TPAFromBox(Box(0,0, Area.X2-Area.X1, Area.Y2-Area.Y1));
    Result := BMP.GetPixels(TPA);
    BMP.Free;
    SetLengthTPA(TPA, 0);
  end;
end;


{*
 Get all the pixels on the bitmap as a Matrix (ImgArray)..
*}
function XT_Bmp2Matrix(bmp: TSCARBitmap; DoFree:Boolean): T2DIntArray;
var
  TIA: TIntArray;
  TPA: TPointArray;
begin  
  TPA := TPAFromBox(Box(0, 0, BMP.Width-1, BMP.Height-1));
  TIA := BMP.GetPixels(TPA);
  SetLengthTPA(TPA, 0);
  Result := XT_MatFromTIA(TIA, BMP.Width,  BMP.Height); 
  SetLengthTIA(TIA, 0);
  if DoFree then BMP.Free; 
end;


{*
 Set all the pixels from an Matrix (ImgArray) to the bitmap..
*}
procedure XT_BmpSetData(var bmp: TSCARBitmap; Matrix:T2DIntArray; Adapt:Boolean);
var 
  W,H:Integer;
  TPA:TPointArray;
begin
  W := Length(Matrix[0]); 
  H := Length(Matrix);
  if Adapt then
    if (W > bmp.Width) or (H > bmp.Height) then
      bmp.SetSize(Max(W,bmp.Width),Max(H,bmp.Height));
  TPA := TPAFromBox(Box(0, 0, W-1, H-1));
  bmp.SetPixelsEx(TPA, XT_MatGetValues(Matrix, TPA));
  SetLengthTPA(TPA, 0);
end;


{*
 Set all the pixels from an Matrix (ImgArray) to the bitmap. 
 If the Matrix contains AlphaColor then that pixel/index will not be changed in the bitmap..
*}
procedure XT_BmpSetDataEx(var bmp: TSCARBitmap; Matrix:T2DIntArray; Adapt:Boolean; AlphaColor:Integer);
var 
  W,H:Integer;
  NewW, NewH:Integer; 
  TPA:TPointArray;
  Mat:T2DIntArray;
begin
  W := Length(Matrix[0]); 
  H := Length(Matrix);
  NewW := Max(W, bmp.Width);
  NewH := Max(H, bmp.Height);
  Mat := XT_Bmp2Matrix(bmp, False);
  if Adapt then
    if (NewW <> bmp.Width) or (NewH <> bmp.Height) then
      bmp.SetSize(NewW,NewH);
  TPA := TPAFromBox(Box(0, 0, W-1, H-1)); 
  XT_MatCombine(Matrix, Mat, AlphaColor); 
  bmp.SetPixelsEx(TPA, XT_MatGetValues(Matrix, TPA));
  SetLengthTPA(TPA, 0);
  SetLengthATIA(Mat, 0);
end;

{*
 Loads a bitmap directly in to a matrix.
*}
function XT_LoadBmpToMatrix(Path:String; Ext:String):T2DIntArray;
var 
  Img: TSCARBitmap;
begin
  Img := TSCARBitmap.Create('');
  case Ext of
    'png': if not(Img.LoadFromPng(Path)) then Exit;
    'jpg': if not(Img.LoadFromJpeg(Path)) then Exit;
    'bmp': if not(Img.LoadFromBmp(Path)) then Exit;
    else Exit;
  end;
  Result := XT_Bmp2Matrix(Img, True);
end;


{*
 Saves a Matrix to the computer as a bitmap.
*}
function XT_MatrixSaveAs(Matrix:T2DIntArray; Path:String; Ext:String): Boolean;
var 
  Img: TSCARBitmap;
begin
  Result := False;
  Img := TSCARBitmap.Create('');
  XT_BmpSetData(Img, Matrix, True);
  case Ext of
    'png': if not(Img.SaveToPng(Path)) then Exit;
    'jpg': if not(Img.SaveToJpeg(Path, 100)) then Exit;
    'bmp': if not(Img.SaveToBmp(Path)) then Exit;
    else Exit;
  end;
  Result := True;
  Img.Free;
end;


{*
 Set all the pixels from an Matrix (ImgArray) to the bitmap..
*}
procedure XT_DebugMatrix(Matrix:T2DIntArray);
var 
  bmp:TSCARBitmap;
begin
  bmp := TSCARBitmap.Create('');
  XT_BmpSetData(bmp, Matrix, True);
  DebugBitmap(bmp);
  Bmp.Clear(0);
  Bmp.Free;
end;


(*
  Fills the TPA with the found colors. It currently supports two algorithms CIE-LAB, and CIE-LCH.
  For CIE-LCH:
    ColorTol = Hue tolerance (180 = tolmax).
    LightTol = Lightness and Chroma (142 = tolmax).

  For CIE-LAB:
    ColorTol = A and B, together they meassure the Chroma and Hue. (142 = tolmax).
    LightTol = Lightness (100 = tolmax).
    
  For RGB:
    ColorTol = R,G,B tolerance. (255 = tolmax).
    LightTol = Not used.
*)
function XT_FindColorTolEx(var TPA:TPointArray; Color:Integer; Area:TBox; ColorTol, LightTol:Integer; MatchAlgo: XT_MatchAlgo): Boolean;
var 
  W,H:Integer;
  Img:T2DIntArray;
begin
  Result := False;
  XT_ClientSize(W,H);
   
  if (Area.X2 > W) or (Area.X2 <= -1) then Area.X2 := W;
  if (Area.Y2 > H) or (Area.Y2 <= -1) then Area.Y2 := H;
  if (Area.X1 > Area.X2) or (Area.Y1 > Area.Y2) then Exit;
  
  Img := XT_Bmp2Matrix(XT_ClientBMP(Area.X1,Area.Y1,Area.X2,Area.Y2), true); //Results in a bit of overhead. 
  case MatchAlgo of   
    RGB: Result := XT_ImFindColorTolEx(Img, TPA, Color, ColorTol);
    LAB: Result := XT_ImFindColorTolExLAB(Img, TPA, Color, ColorTol, LightTol);
    LCH: Result := XT_ImFindColorTolExLCH(Img, TPA, Color, ColorTol, LightTol);
  end; 
  SetLengthATIA(Img, 0);
  if not(Result) then Exit;
  if (Area.X1=0) and (Area.Y1 = 0) then Exit;
  XT_MoveTPA(TPA, Area.X1, Area.Y1);
end;



{*
 .... Will probably be removed..
*}
function XT_BMPFindEdges(BMP:TSCARBitmap; MinDiff:Integer): TPointArray;
var 
  Img:T2DIntArray;
  W,H:Integer;
begin
  XT_ClientSize(W,H);
  Img := XT_Bmp2Matrix(XT_ClientBMP(0,0,W,H), True);
  Result := XT_ImCEdges(Img, MinDiff);
  SetLengthATIA(Img, 0);
end;




//-----------------------------------------------------------------------
// OCR
//-----------------------------------------------------------------------
{*
 ....
*}
function XT_LoadFontColor(FontPath:String; Color,Tol:Integer): TChars;
var
  path:String;
  TPA:TPointArray;
  i:Integer;
  tmp:TSCARBitmap;  
  B:TBox;
begin
  tmp := TSCARBitmap.Create('');
  SetLength(Result, 256);
  if not(DirectoryExists(FontPath)) then
  begin
    WriteLn('UNABLE TO LOAD FONT: "' + FontPath + '". Path does not exist.'); 
    Exit;
  end;
  for i:=0 to 255 do
  begin      
    path := FontPath+'\'+IntToStr(ord(i)) +'.bmp'; 
    if FileExists(path) then
    begin
      tmp.LoadFromBmp(path); 
      Result[i] := XT_Bmp2Matrix(tmp, False);
      XT_ImFindColorTolEx(Result[i],TPA,Color,Tol);
      SetLength(Result[i], 0);
      B := TPABounds(TPA);
      Result[i] := XT_NewMatrix((B.x2 - B.x1)+1, (B.y2 - B.y1)+1);
      XT_MatrixSetTPA(Result[i],TPA,255, Point(B.x1,B.y1));
      tmp.SetSize(1,1);
      tmp.Clear(0);
    end;
  end;
end;


{*
 ....
*}
function XT_LoadFontEx(FontPath:String; Invert:Boolean): TChars;
var
  path:String;
  TPA:TPointArray;
  i:Integer;
  tmp:TSCARBitmap;  
  B:TBox;
begin
  tmp := TSCARBitmap.Create('');
  SetLength(Result, 256);
  if not(DirectoryExists(FontPath)) then
  begin
    WriteLn('UNABLE TO LOAD FONT: "' + FontPath + '". Path does not exist.'); 
    Exit;
  end;
  for i:=0 to 255 do
  begin      
    path := FontPath+'\'+IntToStr(ord(i)) +'.bmp'; 
    if FileExists(path) then
    begin
      tmp.LoadFromBmp(path); 
      Result[i] := XT_ImThreshold(XT_Bmp2Matrix(tmp, False),127,0,255,Invert);
      XT_ImFindColorTolEx(Result[i],TPA,255,1);
      SetLength(Result[i], 0);
      B := TPABounds(TPA);
      Result[i] := XT_NewMatrix((B.x2 - B.x1)+1, (B.y2 - B.y1)+1);
      XT_MatrixSetTPA(Result[i],TPA,255, Point(B.x1,B.y1));
      tmp.SetSize(1,1);
      tmp.Clear(0);
    end;
  end;
end;


{*
 ....
*}
function XT_LoadFont(FontPath:String): TChars;
begin
  Result := XT_LoadFontEx(FontPath, False);
end;


{*
 ....
*}
procedure XT_FreeFont(Font:TChars);
begin
  SetLength(Font, 0);
end;


{*
 ....
*}
function XT_GetTextFromTPA(TPA:TPointArray; Width:Integer; Fonts:Array of TChars; MinCharSpace, MinSpace, PixelNoiseTol, RowSpace:Integer; Range: String): String;
var
  ImgArr:T2DIntArray;
  Rows: T2DPointArray;
  W,H,i:Integer;
  RowText: String; 
  B:TBox;
begin
  Rows := XT_ClusterTPAEx(TPA, Width, RowSpace, True);
  for i:=0 to High(Rows) do
  begin 
    B := TPABounds(Rows[i]);  
    W := B.X2 - B.X1 + 1;
    H := B.Y2 - B.Y1 + 1;
    SetLength(ImgArr, 0);  
    ImgArr := XT_NewMatrix(W,H);
    XT_MatrixSetTPA(ImgArr, Rows[i], $FFFFFF, Point(B.x1,B.y1));   
    //XT_DebugMatrix(ImgArr);
    try RowText := XT_ImGetTextEx(ImgArr, Fonts, MinCharSpace,  MinSpace, PixelNoiseTol, Range)
    except Continue;
    end;
    if (i = 0) then 
      Result := RowText
    else 
      Result := Result + #13#10 + RowText;
  end;
  SetLength(ImgArr, 0);
end;

  
{*
 ....
*}
function XT_GetTextAt(Area:TBox; Font:TChars; MinSpace, TextColor, ColorTol, PixelNoiseTol:Integer): String;
var
  ImgArr:T2DIntArray;
  TPA: TPointArray;
begin
  ImgArr := XT_BMP2Matrix(GetClient.CaptureEx(Area.X1,Area.Y1,Area.X2,Area.Y2), True);
  XT_ImFindColorTolEx(ImgArr, TPA, TextColor, ColorTol);
  XT_SortTPAByRow(TPA);
  Result := XT_GetTextFromTPA(TPA, (Area.x2-Area.x1+1), [Font], 1, MinSpace, PixelNoiseTol, 1, '');
end;


{*
 ....
*}
function XT_GetTextAtEx(Area:TBox; Fonts:Array of TChars; MinCharSpace, MinSpace:Integer; TextColors:TIntArray; ColorTol, PixelNoiseTol, RowSpace:Integer; Range: String): String;
var
  ImgArr:T2DIntArray;
  TMP,TPA: TPointArray;
  i:Integer;
begin
  ImgArr := XT_BMP2Matrix(GetClient.CaptureEx(Area.X1,Area.Y1,Area.X2,Area.Y2), True);
  for i:=0 to High(TextColors) do begin
    XT_ImFindColorTolEx(ImgArr, TMP, TextColors[i], ColorTol);
    TPA := XT_UniteTPA(TPA, TMP, False);
  end;  
  XT_SortTPAByRow(TPA);
  Result := XT_GetTextFromTPA(TPA, (Area.x2-Area.x1+1), Fonts, MinCharSpace, MinSpace, PixelNoiseTol, RowSpace, Range);
end;


{*
 ....
*}
function XT_GetTextDynAt(Area:TBox; Font:TChars; MinSpace, PixelNoiseTol: Integer; Invert:Boolean): String;
var
  ImgArr:T2DIntArray;
  TPA: TPointArray;
begin
  ImgArr := XT_BMP2Matrix(GetClient.CaptureEx(Area.X1,Area.Y1,Area.X2,Area.Y2), True);
  ImgArr := XT_ImThresholdAdaptive(ImgArr, 0, clRed,Invert, TM_Mean, 50);
  XT_ImFindColorTolEx(ImgArr, TPA, clRed, 1);
  XT_SortTPAByRow(TPA);
  Result := XT_GetTextFromTPA(TPA, (Area.x2-Area.x1+1), [Font], 1, MinSpace, PixelNoiseTol, 1, '');
end;


{*
 ....
*}
function XT_GetTextDynAtEx(Area:TBox; Fonts:Array of TChars; MinCharSpace, MinSpace, PixelNoiseTol, RowSpace:Integer; ThreshMod:Integer; Invert:Boolean; Range: String): String;
var
  ImgArr:T2DIntArray;
  TPA: TPointArray;
begin
  ImgArr := XT_BMP2Matrix(GetClient.CaptureEx(Area.X1,Area.Y1,Area.X2,Area.Y2), True);
  ImgArr := XT_ImThresholdAdaptive(ImgArr, 0, clRed, Invert, TM_Mean, ThreshMod);
  XT_ImFindColorTolEx(ImgArr, TPA, clRed, 1);
  XT_SortTPAByRow(TPA);
  Result := XT_GetTextFromTPA(TPA, (Area.x2-Area.x1+1), Fonts, MinCharSpace, MinSpace, PixelNoiseTol, RowSpace, Range);
end;

/////////// IS TEXT
{*
 ....
*}
function XT_IsTextAtEx(Text:String; Area:TBox; Font:TChars; MinCharSpace, MinSpace, TextColor, ColorTol, PixelNoiseTol, RowSpace:Integer; Range: String): Boolean;
var Subject: String;
begin
  Subject := XT_GetTextAtEx(Area, [Font], MinCharSpace, MinSpace, [TextColor], ColorTol, PixelNoiseTol, RowSpace, Range);
  Result := Pos(Text, Subject) <> 0;
end;

{*
 ....
*}
function XT_IsTextAt(Text:String; Area:TBox; Font:TChars; MinSpace, TextColor, ColorTol:Integer): Boolean;
var Subject: String;
begin
  Subject := XT_GetTextAt(Area, Font, MinSpace, TextColor, ColorTol, 3);
  Result := Pos(Text, Subject) <> 0;
end;

